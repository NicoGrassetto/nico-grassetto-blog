---
export interface Props {
  type: 'line' | 'bar' | 'pie' | 'doughnut' | 'scatter' | 'bubble' | 'polarArea' | 'radar';
  data: any;
  options?: any;
  width?: number;
  height?: number;
  id?: string;
}

const { 
  type = 'line', 
  data, 
  options = {}, 
  width = 400, 
  height = 300,
  id = 'chart-' + Math.random().toString(36).substr(2, 9)
} = Astro.props;

// Default responsive options with theme-aware colors
const defaultOptions = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    title: {
      display: !!options.title,
      text: options.title,
      color: 'var(--chart-text-color)'
    },
    legend: {
      display: true,
      position: 'top',
      labels: {
        color: 'var(--chart-text-color)'
      }
    }
  },
  scales: type !== 'pie' && type !== 'doughnut' && type !== 'polarArea' ? {
    x: {
      ticks: {
        color: 'var(--chart-text-color)'
      },
      grid: {
        color: 'var(--chart-grid-color)'
      }
    },
    y: {
      ticks: {
        color: 'var(--chart-text-color)'
      },
      grid: {
        color: 'var(--chart-grid-color)'
      }
    }
  } : undefined,
  ...options
};
---

<div class="chart-container" style={`width: ${width}px; height: ${height}px; margin: 1rem auto;`}>
  <canvas id={id} width={width} height={height}></canvas>
</div>

<script define:vars={{ type, data, options: defaultOptions, id }}>
  // Function to get theme-aware colors
  function getThemeColors() {
    const theme = document.documentElement.getAttribute('data-theme') || 'dark';
    
    if (theme === 'light') {
      return {
        textColor: '#1a202c',
        gridColor: 'rgba(0, 0, 0, 0.1)',
        backgroundColor: '#ffffff',
        borderColor: 'rgba(0, 0, 0, 0.2)'
      };    } else {
      return {
        textColor: '#e2e8f0',
        gridColor: 'rgba(255, 255, 255, 0.1)',
        backgroundColor: '#000000',
        borderColor: 'rgba(255, 255, 255, 0.2)'
      };
    }
  }
  
  // Function to update chart colors
  function updateChartColors(chart) {
    const colors = getThemeColors();
    
    if (chart.options.plugins?.title) {
      chart.options.plugins.title.color = colors.textColor;
    }
    
    if (chart.options.plugins?.legend?.labels) {
      chart.options.plugins.legend.labels.color = colors.textColor;
    }
    
    if (chart.options.scales) {
      if (chart.options.scales.x) {
        chart.options.scales.x.ticks.color = colors.textColor;
        chart.options.scales.x.grid.color = colors.gridColor;
      }
      if (chart.options.scales.y) {
        chart.options.scales.y.ticks.color = colors.textColor;
        chart.options.scales.y.grid.color = colors.gridColor;
      }
    }
    
    chart.update('none');
  }
  
  // Wait for Chart.js to be available
  function initChart() {
    if (typeof Chart !== 'undefined') {
      const ctx = document.getElementById(id);
      if (ctx) {
        try {
          // Apply current theme colors to options
          const colors = getThemeColors();
          const themeAwareOptions = { ...options };
          
          if (themeAwareOptions.plugins?.title) {
            themeAwareOptions.plugins.title.color = colors.textColor;
          }
          if (themeAwareOptions.plugins?.legend?.labels) {
            themeAwareOptions.plugins.legend.labels.color = colors.textColor;
          }
          if (themeAwareOptions.scales) {
            if (themeAwareOptions.scales.x) {
              themeAwareOptions.scales.x.ticks = themeAwareOptions.scales.x.ticks || {};
              themeAwareOptions.scales.x.grid = themeAwareOptions.scales.x.grid || {};
              themeAwareOptions.scales.x.ticks.color = colors.textColor;
              themeAwareOptions.scales.x.grid.color = colors.gridColor;
            }
            if (themeAwareOptions.scales.y) {
              themeAwareOptions.scales.y.ticks = themeAwareOptions.scales.y.ticks || {};
              themeAwareOptions.scales.y.grid = themeAwareOptions.scales.y.grid || {};
              themeAwareOptions.scales.y.ticks.color = colors.textColor;
              themeAwareOptions.scales.y.grid.color = colors.gridColor;
            }
          }
          
          const chart = new Chart(ctx, {
            type: type,
            data: data,
            options: themeAwareOptions
          });
          
          // Store chart instance for theme updates
          window[`chartInstance_${id}`] = chart;
          
          // Listen for theme changes
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                updateChartColors(chart);
              }
            });
          });
          
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-theme']
          });
          
          console.log('Chart rendered successfully:', id);
        } catch (error) {
          console.error('Chart rendering error:', error);
          console.log('Chart data:', data);
          console.log('Chart type:', type);
        }
      } else {
        console.error('Canvas element not found:', id);
      }
    } else {
      // Chart.js not loaded yet, wait a bit and try again
      setTimeout(initChart, 100);
    }
  }
  
  // Start initialization when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initChart);
  } else {
    initChart();
  }
</script>

<style>
  .chart-container {
    background: var(--chart-background, #ffffff);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 10px var(--chart-shadow, rgba(0, 0, 0, 0.1));
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid var(--chart-border, rgba(0, 0, 0, 0.1));
    transition: background-color 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;
  }
  
  canvas {
    max-width: 100%;
    height: auto;
  }
  
  @media (max-width: 768px) {
    .chart-container {
      width: 100% !important;
      max-width: 100%;
    }
  }
    /* Light theme chart variables */
  :global([data-theme="light"]) .chart-container {
    --chart-background: #ffffff;
    --chart-shadow: rgba(0, 0, 0, 0.1);
    --chart-border: rgba(0, 0, 0, 0.1);
    --chart-text-color: #1a202c;
    --chart-grid-color: rgba(0, 0, 0, 0.1);
  }
  
  /* Dark theme chart variables */
  :global([data-theme="dark"]) .chart-container {
    --chart-background: #000000;
    --chart-shadow: rgba(255, 255, 255, 0.1);
    --chart-border: rgba(255, 255, 255, 0.2);
    --chart-text-color: #e2e8f0;
    --chart-grid-color: rgba(255, 255, 255, 0.1);
  }
</style>
