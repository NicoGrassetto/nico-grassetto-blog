---
// This component can be used in regular .md files by including chart data in frontmatter
export interface Props {
  charts?: Array<{
    type: 'line' | 'bar' | 'pie' | 'doughnut' | 'scatter' | 'bubble' | 'polarArea' | 'radar';
    id: string;
    data?: any;
    options?: any;
    title?: string;
    width?: number;
    height?: number;
  }>;
}

const { charts = [] } = Astro.props;
---

{charts.map((chart) => (
  chart.data && (
    <div class="chart-wrapper" id={`chart-wrapper-${chart.id}`}>
      <div class="chart-container" style={`width: ${chart.width || 500}px; height: ${chart.height || 300}px; margin: 2rem auto;`}>
        <canvas id={`chart-${chart.id}`} width={chart.width || 500} height={chart.height || 300}></canvas>
      </div>
    </div>
  )
))}

<script define:vars={{ charts }}>
  if (charts && charts.length > 0) {
    // Function to get theme-aware colors
    function getThemeColors() {
      const theme = document.documentElement.getAttribute('data-theme') || 'dark';
      
      if (theme === 'light') {
        return {
          textColor: '#1a202c',
          gridColor: 'rgba(0, 0, 0, 0.1)',
          backgroundColor: '#ffffff',
          borderColor: 'rgba(0, 0, 0, 0.2)'
        };
      } else {
        return {
          textColor: '#e2e8f0',
          gridColor: 'rgba(255, 255, 255, 0.1)',
          backgroundColor: '#2d3748',
          borderColor: 'rgba(255, 255, 255, 0.2)'
        };
      }
    }
    
    import('https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js').then((module) => {
      const Chart = module.default;
      
      charts.filter(chart => chart.data).forEach(chart => {
        const ctx = document.getElementById(`chart-${chart.id}`);
        if (ctx) {
          const colors = getThemeColors();
          
          const defaultOptions = {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: !!chart.title,
                text: chart.title,
                font: { size: 16, weight: 'bold' },
                color: colors.textColor
              },
              legend: {
                display: true,
                position: 'top',
                labels: {
                  color: colors.textColor
                }
              }
            },
            scales: chart.type !== 'pie' && chart.type !== 'doughnut' && chart.type !== 'polarArea' ? {
              x: {
                ticks: {
                  color: colors.textColor
                },
                grid: {
                  color: colors.gridColor
                }
              },
              y: {
                ticks: {
                  color: colors.textColor
                },
                grid: {
                  color: colors.gridColor
                }
              }
            } : undefined,
            ...chart.options
          };
          
          const chartInstance = new Chart(ctx, {
            type: chart.type,
            data: chart.data,
            options: defaultOptions
          });
          
          // Store chart for theme updates
          window[`chartInstance_chart-${chart.id}`] = chartInstance;
          
          // Function to update colors
          function updateChartColors() {
            const newColors = getThemeColors();
            
            if (chartInstance.options.plugins?.title) {
              chartInstance.options.plugins.title.color = newColors.textColor;
            }
            if (chartInstance.options.plugins?.legend?.labels) {
              chartInstance.options.plugins.legend.labels.color = newColors.textColor;
            }
            if (chartInstance.options.scales) {
              if (chartInstance.options.scales.x) {
                chartInstance.options.scales.x.ticks.color = newColors.textColor;
                chartInstance.options.scales.x.grid.color = newColors.gridColor;
              }
              if (chartInstance.options.scales.y) {
                chartInstance.options.scales.y.ticks.color = newColors.textColor;
                chartInstance.options.scales.y.grid.color = newColors.gridColor;
              }
            }
            chartInstance.update('none');
          }
          
          // Listen for theme changes
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                updateChartColors();
              }
            });
          });
          
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-theme']
          });
        }
      });
    });
  }
</script>

<style>
  .chart-wrapper {
    margin: 2rem 0;
  }
  
  .chart-container {
    background: var(--chart-background, #ffffff);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 10px var(--chart-shadow, rgba(0, 0, 0, 0.1));
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid var(--chart-border, rgba(0, 0, 0, 0.1));
    transition: background-color 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;
  }
  
  canvas {
    max-width: 100%;
    height: auto;
  }
  
  @media (max-width: 768px) {
    .chart-container {
      width: 100% !important;
      max-width: 100%;
    }
  }
  
  /* Light theme chart variables */
  :global([data-theme="light"]) .chart-container {
    --chart-background: #ffffff;
    --chart-shadow: rgba(0, 0, 0, 0.1);
    --chart-border: rgba(0, 0, 0, 0.1);
    --chart-text-color: #1a202c;
    --chart-grid-color: rgba(0, 0, 0, 0.1);
  }
  
  /* Dark theme chart variables */
  :global([data-theme="dark"]) .chart-container {
    --chart-background: #2d3748;
    --chart-shadow: rgba(0, 0, 0, 0.3);
    --chart-border: rgba(255, 255, 255, 0.1);
    --chart-text-color: #e2e8f0;
    --chart-grid-color: rgba(255, 255, 255, 0.1);
  }
</style>
