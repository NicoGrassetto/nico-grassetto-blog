---
// Mermaid.astro - Component for rendering Mermaid diagrams
export interface Props {
  content?: string;
}

const { content } = Astro.props;
---

<div class="mermaid-container">
  <pre class="mermaid" style="background: transparent; border: none;">
    {content ? content : <slot />}
  </pre>
</div>

<!-- Load Mermaid from CDN -->
<script type="module">
  // Import Mermaid from CDN
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';

  // Configure Mermaid
  mermaid.initialize({
    startOnLoad: false, // We'll manually trigger rendering
    theme: 'default',
    securityLevel: 'loose',
    themeVariables: {
      fontFamily: 'system-ui, -apple-system, sans-serif'
    },
    flowchart: {
      useMaxWidth: true,
      htmlLabels: true
    },
    sequence: {
      useMaxWidth: true,
      wrap: true
    },
    gantt: {
      useMaxWidth: true
    }
  });

  // Function to render diagrams
  async function renderMermaidDiagrams() {
    const mermaidElements = document.querySelectorAll('.mermaid:not([data-processed])');
    
    for (let i = 0; i < mermaidElements.length; i++) {
      const element = mermaidElements[i];
      const id = `mermaid-${i}-${Date.now()}`;
      
      try {
        // Get the diagram definition
        const graphDefinition = element.textContent?.trim() || '';
        
        if (graphDefinition) {
          // Render the diagram
          const { svg } = await mermaid.render(id, graphDefinition);
          
          // Replace the pre element with the rendered SVG
          element.innerHTML = svg;
          element.setAttribute('data-processed', 'true');
        }
      } catch (err) {
        console.error('Mermaid rendering error:', err);
        const errorMessage = err instanceof Error ? err.message : 'Unknown error';
        element.innerHTML = `<div style="color: red; padding: 1rem; border: 1px solid red; border-radius: 4px; background: #fff;">
          <strong>Mermaid Diagram Error:</strong><br>
          ${errorMessage}<br><br>
          <details>
            <summary>Diagram Source</summary>
            <pre style="background: #f5f5f5; padding: 0.5rem; margin: 0.5rem 0;">${element.textContent}</pre>
          </details>
        </div>`;
        element.setAttribute('data-processed', 'true');
      }
    }
  }

  // Render on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', renderMermaidDiagrams);
  } else {
    renderMermaidDiagrams();
  }

  // Re-render when navigating (for SPAs)
  document.addEventListener('astro:page-load', renderMermaidDiagrams);
</script>

<style>
  .mermaid-container {
    margin: 1.5rem 0;
    text-align: center;
    overflow-x: auto;
  }

  .mermaid {
    max-width: 100%;
    height: auto;
    font-family: system-ui, -apple-system, sans-serif;
  }

  /* Ensure diagrams are visible */
  .mermaid svg {
    max-width: 100%;
    height: auto;
  }

  /* Style for error messages */
  .mermaid-error {
    color: #dc3545;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 0.375rem;
    padding: 1rem;
    margin: 1rem 0;
  }
</style>
