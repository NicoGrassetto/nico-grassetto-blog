---
export interface Props {
  type: 'line' | 'bar' | 'pie' | 'doughnut' | 'scatter' | 'bubble' | 'polarArea' | 'radar';
  data: any;
  options?: any;
  width?: number;
  height?: number;
}

const { 
  type = 'line', 
  data, 
  options = {}, 
  width = 400, 
  height = 300
} = Astro.props;

const id = 'chart-' + Math.random().toString(36).substr(2, 9);

// Theme-aware chart configuration
const chartConfig = {
  type,
  data,
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: {
        display: !!options.title,
        text: options.title,
        color: 'var(--chart-text-color)'
      },
      legend: {
        display: true,
        position: 'top',
        labels: {
          color: 'var(--chart-text-color)'
        }
      }
    },
    scales: type !== 'pie' && type !== 'doughnut' && type !== 'polarArea' ? {
      x: {
        ticks: {
          color: 'var(--chart-text-color)'
        },
        grid: {
          color: 'var(--chart-grid-color)'
        }
      },
      y: {
        ticks: {
          color: 'var(--chart-text-color)'
        },
        grid: {
          color: 'var(--chart-grid-color)'
        }
      }
    } : undefined,
    ...options
  }
};
---

<div class="chart-wrapper" style={`width: ${width}px; height: ${height}px; margin: 1rem auto;`}>
  <canvas id={id} width={width} height={height}></canvas>
</div>

<script>
  import { Chart, registerables } from 'chart.js';
  
  // Register all Chart.js components
  Chart.register(...registerables);
  
  // Function to get theme-aware colors
  function getThemeColors() {
    const theme = document.documentElement.getAttribute('data-theme') || 'dark';
    
    if (theme === 'light') {
      return {
        textColor: '#1a202c',
        gridColor: 'rgba(0, 0, 0, 0.1)',
        backgroundColor: '#ffffff',
        borderColor: 'rgba(0, 0, 0, 0.2)'
      };    } else {
      return {
        textColor: '#e2e8f0',
        gridColor: 'rgba(255, 255, 255, 0.1)',
        backgroundColor: '#000000',
        borderColor: 'rgba(255, 255, 255, 0.2)'
      };
    }
  }
    // Function to update chart colors based on theme
  function updateChartColors(chart: any) {
    const colors = getThemeColors();
    
    // Update chart options
    if (chart.options.plugins?.title) {
      chart.options.plugins.title.color = colors.textColor;
    }
    
    if (chart.options.plugins?.legend?.labels) {
      chart.options.plugins.legend.labels.color = colors.textColor;
    }
    
    // Update scales for charts that have them
    if (chart.options.scales) {
      if (chart.options.scales.x) {
        chart.options.scales.x.ticks.color = colors.textColor;
        chart.options.scales.x.grid.color = colors.gridColor;
      }
      if (chart.options.scales.y) {
        chart.options.scales.y.ticks.color = colors.textColor;
        chart.options.scales.y.grid.color = colors.gridColor;
      }
    }
    
    chart.update('none');
  }
  
  // Function to initialize charts
  function initializeCharts() {
    const canvases = document.querySelectorAll('canvas[id^="chart-"]') as NodeListOf<HTMLCanvasElement>;
    canvases.forEach(canvas => {
      // Skip if already has a chart
      if ((canvas as any).chartInstance) return;
      
      // Get chart config from data attribute or window object
      const chartId = canvas.id;
      const config = (window as any)[`chartConfig_${chartId}`];
      
      if (config) {
        try {
          const ctx = canvas.getContext('2d');
          if (ctx) {
            // Apply current theme colors before creating chart
            const colors = getThemeColors();
            
            // Update config with current theme colors
            if (config.options?.plugins?.title) {
              config.options.plugins.title.color = colors.textColor;
            }
            if (config.options?.plugins?.legend?.labels) {
              config.options.plugins.legend.labels.color = colors.textColor;
            }
            if (config.options?.scales) {
              if (config.options.scales.x) {
                config.options.scales.x.ticks = config.options.scales.x.ticks || {};
                config.options.scales.x.grid = config.options.scales.x.grid || {};
                config.options.scales.x.ticks.color = colors.textColor;
                config.options.scales.x.grid.color = colors.gridColor;
              }
              if (config.options.scales.y) {
                config.options.scales.y.ticks = config.options.scales.y.ticks || {};
                config.options.scales.y.grid = config.options.scales.y.grid || {};
                config.options.scales.y.ticks.color = colors.textColor;
                config.options.scales.y.grid.color = colors.gridColor;
              }
            }
            
            const chart = new Chart(ctx, config);
            (canvas as any).chartInstance = chart;
            (window as any)[`chartInstance_${chartId}`] = chart;
            console.log('Chart created:', chartId);
          }
        } catch (error) {
          console.error('Error creating chart:', error);
        }
      }
    });
  }
  
  // Function to update all charts when theme changes
  function updateAllChartsForTheme() {
    const canvases = document.querySelectorAll('canvas[id^="chart-"]') as NodeListOf<HTMLCanvasElement>;
    canvases.forEach(canvas => {
      const chartId = canvas.id;
      const chart = (window as any)[`chartInstance_${chartId}`];
      if (chart) {
        updateChartColors(chart);
      }
    });
  }
  
  // Listen for theme changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
        updateAllChartsForTheme();
      }
    });
  });
  
  // Start observing theme changes
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme']
  });
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCharts);
  } else {
    initializeCharts();
  }
</script>

<script define:vars={{ chartConfig, id }}>
  // Store chart config globally for the initialization script
  window[`chartConfig_${id}`] = chartConfig;
</script>

<style>
  .chart-wrapper {
    background: var(--chart-background, #ffffff);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 10px var(--chart-shadow, rgba(0, 0, 0, 0.1));
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid var(--chart-border, rgba(0, 0, 0, 0.1));
    transition: background-color 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;
  }
  
  canvas {
    max-width: 100%;
    height: auto;
  }
  
  @media (max-width: 768px) {
    .chart-wrapper {
      width: 100% !important;
      max-width: 100%;
    }
  }
    /* Light theme chart variables */
  :global([data-theme="light"]) .chart-wrapper {
    --chart-background: #ffffff;
    --chart-shadow: rgba(0, 0, 0, 0.1);
    --chart-border: rgba(0, 0, 0, 0.1);
    --chart-text-color: #1a202c;
    --chart-grid-color: rgba(0, 0, 0, 0.1);
  }
  
  /* Dark theme chart variables */
  :global([data-theme="dark"]) .chart-wrapper {
    --chart-background: #000000;
    --chart-shadow: rgba(255, 255, 255, 0.1);
    --chart-border: rgba(255, 255, 255, 0.2);
    --chart-text-color: #e2e8f0;
    --chart-grid-color: rgba(255, 255, 255, 0.1);
  }
</style>
