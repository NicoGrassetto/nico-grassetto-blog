---
export interface Props {
  title?: string;
  xLabel?: string;
  yLabel?: string;
  data: number[][][]; // Array of series, where each series is an array of [x, y] coordinate pairs
  labels?: string[];
  colors?: string[];
  width?: number;
  height?: number;
  showTrendline?: boolean;
}

const { 
  title = '',
  xLabel = 'X',
  yLabel = 'Y',
  data,
  labels = [],
  colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6'],
  width = 500,
  height = 400,
  showTrendline = false
} = Astro.props;

const id = 'scatter-' + Math.random().toString(36).substr(2, 9);

// Transform data into Chart.js format
const datasets = data.map((series, index) => ({
  label: labels[index] || `Series ${index + 1}`,
  data: series.map((point) => ({ x: point[0], y: point[1] })),
  backgroundColor: colors[index % colors.length],
  borderColor: colors[index % colors.length],
  borderWidth: 2,
  pointRadius: 4,
  pointHoverRadius: 6,
}));

const chartData = { datasets };

const options = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    title: {
      display: !!title,
      text: title,
      font: { size: 16, weight: 'bold' },
      color: 'var(--chart-text-color)'
    },
    legend: {
      display: labels.length > 0,
      position: 'top',
      labels: {
        color: 'var(--chart-text-color)'
      }
    }
  },
  scales: {
    x: {
      display: true,
      title: {
        display: !!xLabel,
        text: xLabel,
        color: 'var(--chart-text-color)'
      },
      ticks: {
        color: 'var(--chart-text-color)'
      },
      grid: {
        color: 'var(--chart-grid-color)'
      }
    },
    y: {
      display: true,
      title: {
        display: !!yLabel,
        text: yLabel,
        color: 'var(--chart-text-color)'
      },
      ticks: {
        color: 'var(--chart-text-color)'
      },
      grid: {
        color: 'var(--chart-grid-color)'
      }
    }
  }
};
---

<div class="scatter-chart-container" style={`width: ${width}px; height: ${height}px; margin: 1rem auto;`}>
  <canvas id={id} width={width} height={height}></canvas>
</div>

<script define:vars={{ chartData, options, id, showTrendline }}>
  // Function to get theme-aware colors
  function getThemeColors() {
    const theme = document.documentElement.getAttribute('data-theme') || 'dark';
    
    if (theme === 'light') {
      return {
        textColor: '#1a202c',
        gridColor: 'rgba(0, 0, 0, 0.1)',
        backgroundColor: '#ffffff',
        borderColor: 'rgba(0, 0, 0, 0.2)'
      };    } else {
      return {
        textColor: '#e2e8f0',
        gridColor: 'rgba(255, 255, 255, 0.1)',
        backgroundColor: '#000000',
        borderColor: 'rgba(255, 255, 255, 0.2)'
      };
    }
  }
  
  function initChart() {
    if (typeof Chart !== 'undefined') {
      const ctx = document.getElementById(id);      if (ctx) {
        try {
          // Apply current theme colors
          const colors = getThemeColors();
          const themeOptions = { ...options };
          
          if (themeOptions.plugins?.title) {
            themeOptions.plugins.title.color = colors.textColor;
          }
          if (themeOptions.plugins?.legend?.labels) {
            themeOptions.plugins.legend.labels.color = colors.textColor;
          }
          if (themeOptions.scales) {
            if (themeOptions.scales.x) {
              themeOptions.scales.x.ticks = themeOptions.scales.x.ticks || {};
              themeOptions.scales.x.grid = themeOptions.scales.x.grid || {};
              themeOptions.scales.x.ticks.color = colors.textColor;
              themeOptions.scales.x.grid.color = colors.gridColor;
              if (themeOptions.scales.x.title) {
                themeOptions.scales.x.title.color = colors.textColor;
              }
            }
            if (themeOptions.scales.y) {
              themeOptions.scales.y.ticks = themeOptions.scales.y.ticks || {};
              themeOptions.scales.y.grid = themeOptions.scales.y.grid || {};
              themeOptions.scales.y.ticks.color = colors.textColor;
              themeOptions.scales.y.grid.color = colors.gridColor;
              if (themeOptions.scales.y.title) {
                themeOptions.scales.y.title.color = colors.textColor;
              }
            }
          }
          
          const chart = new Chart(ctx, {
            type: 'scatter',
            data: chartData,
            options: themeOptions
          });
          
          // Store chart for theme updates
          window[`chartInstance_${id}`] = chart;
          
          // Function to update colors
          function updateChartColors() {
            const newColors = getThemeColors();
            
            if (chart.options.plugins?.title) {
              chart.options.plugins.title.color = newColors.textColor;
            }
            if (chart.options.plugins?.legend?.labels) {
              chart.options.plugins.legend.labels.color = newColors.textColor;
            }
            if (chart.options.scales) {
              if (chart.options.scales.x) {
                chart.options.scales.x.ticks.color = newColors.textColor;
                chart.options.scales.x.grid.color = newColors.gridColor;
                if (chart.options.scales.x.title) {
                  chart.options.scales.x.title.color = newColors.textColor;
                }
              }
              if (chart.options.scales.y) {
                chart.options.scales.y.ticks.color = newColors.textColor;
                chart.options.scales.y.grid.color = newColors.gridColor;
                if (chart.options.scales.y.title) {
                  chart.options.scales.y.title.color = newColors.textColor;
                }
              }
            }
            chart.update('none');
          }
          
          // Listen for theme changes
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                updateChartColors();
              }
            });
          });
          
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-theme']
          });
          
          console.log('Scatter chart rendered successfully:', id);
        } catch (error) {
          console.error('Scatter chart rendering error:', error);
        }
      }
    } else {
      setTimeout(initChart, 100);
    }
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initChart);
  } else {
    initChart();
  }
</script>

<style>
  .scatter-chart-container {
    background: var(--chart-background, #ffffff);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 10px var(--chart-shadow, rgba(0, 0, 0, 0.1));
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid var(--chart-border, rgba(0, 0, 0, 0.1));
    transition: background-color 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;
  }
  
  canvas {
    max-width: 100%;
    height: auto;
  }
  
  @media (max-width: 768px) {
    .scatter-chart-container {
      width: 100% !important;
      max-width: 100%;
    }
  }
  
  /* Light theme chart variables */
  :global([data-theme="light"]) .scatter-chart-container {
    --chart-background: #ffffff;
    --chart-shadow: rgba(0, 0, 0, 0.1);
    --chart-border: rgba(0, 0, 0, 0.1);
    --chart-text-color: #1a202c;
    --chart-grid-color: rgba(0, 0, 0, 0.1);
  }
  
  /* Dark theme chart variables */
  :global([data-theme="dark"]) .scatter-chart-container {
    --chart-background: #000000;    --chart-shadow: rgba(255, 255, 255, 0.1);
    --chart-border: rgba(255, 255, 255, 0.2);
    --chart-text-color: #e2e8f0;
    --chart-grid-color: rgba(255, 255, 255, 0.1);  }
</style>
