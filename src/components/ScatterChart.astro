---
export interface Props {
  title?: string;
  xLabel?: string;
  yLabel?: string;
  data: number[][][]; // Array of series, where each series is an array of [x, y] coordinate pairs
  labels?: string[];
  colors?: string[];
  width?: number;
  height?: number;
  showTrendline?: boolean;
}

const { 
  title = '',
  xLabel = 'X',
  yLabel = 'Y',
  data,
  labels = [],
  colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6'],
  width = 500,
  height = 400,
  showTrendline = false
} = Astro.props;

const id = 'scatter-' + Math.random().toString(36).substr(2, 9);

// Transform data into Chart.js format
const datasets = data.map((series, index) => ({
  label: labels[index] || `Series ${index + 1}`,
  data: series.map((point) => ({ x: point[0], y: point[1] })),
  backgroundColor: colors[index % colors.length],
  borderColor: colors[index % colors.length],
  borderWidth: 2,
  pointRadius: 4,
  pointHoverRadius: 6,
}));

const chartData = { datasets };

const options = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    title: {
      display: !!title,
      text: title,
      font: { size: 16, weight: 'bold' }
    },
    legend: {
      display: labels.length > 0,
      position: 'top'
    }
  },
  scales: {
    x: {
      display: true,
      title: {
        display: !!xLabel,
        text: xLabel
      }
    },
    y: {
      display: true,
      title: {
        display: !!yLabel,
        text: yLabel
      }
    }
  }
};
---

<div class="scatter-chart-container" style={`width: ${width}px; height: ${height}px; margin: 1rem auto;`}>
  <canvas id={id} width={width} height={height}></canvas>
</div>

<script define:vars={{ chartData, options, id, showTrendline }}>
  function initChart() {
    if (typeof Chart !== 'undefined') {
      const ctx = document.getElementById(id);
      if (ctx) {
        try {
          new Chart(ctx, {
            type: 'scatter',
            data: chartData,
            options: options
          });
          console.log('Scatter chart rendered successfully:', id);
        } catch (error) {
          console.error('Scatter chart rendering error:', error);
        }
      }
    } else {
      setTimeout(initChart, 100);
    }
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initChart);
  } else {
    initChart();
  }
</script>

<style>
  .scatter-chart-container {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  canvas {
    max-width: 100%;
    height: auto;
  }
  
  @media (max-width: 768px) {
    .scatter-chart-container {
      width: 100% !important;
      max-width: 100%;
    }
  }
</style>
