---
export interface Props {
  type: 'line' | 'bar' | 'pie' | 'doughnut' | 'scatter' | 'bubble' | 'polarArea' | 'radar';
  data: any;
  options?: any;
  width?: number;
  height?: number;
}

const { 
  type = 'line', 
  data, 
  options = {}, 
  width = 400, 
  height = 300
} = Astro.props;

const id = 'chart-' + Math.random().toString(36).substr(2, 9);
---

<div class="simple-chart-container" style={`width: ${width}px; height: ${height}px; margin: 1rem auto;`}>
  <canvas id={id} width={width} height={height}></canvas>
</div>

<script is:inline define:vars={{ type, data, options, id, width, height }}>
  function createChart() {
    console.log('Attempting to create chart:', id);
    console.log('Chart.js available:', typeof Chart !== 'undefined');
    console.log('Canvas element found:', !!document.getElementById(id));
    
    // Function to get theme-aware colors
    function getThemeColors() {
      const theme = document.documentElement.getAttribute('data-theme') || 'dark';
      
      if (theme === 'light') {
        return {
          textColor: '#1a202c',
          gridColor: 'rgba(0, 0, 0, 0.1)',
          backgroundColor: '#ffffff',
          borderColor: 'rgba(0, 0, 0, 0.2)'
        };
      } else {
        return {
          textColor: '#e2e8f0',
          gridColor: 'rgba(255, 255, 255, 0.1)',
          backgroundColor: '#2d3748',
          borderColor: 'rgba(255, 255, 255, 0.2)'
        };
      }
    }
    
    if (typeof Chart !== 'undefined') {
      const canvas = document.getElementById(id);
      if (canvas) {
        const ctx = canvas.getContext('2d');
        const colors = getThemeColors();
        
        const defaultOptions = {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: !!options.title,
              text: options.title,
              color: colors.textColor
            },
            legend: {
              display: true,
              position: 'top',
              labels: {
                color: colors.textColor
              }
            }
          },
          scales: type !== 'pie' && type !== 'doughnut' && type !== 'polarArea' ? {
            x: {
              ticks: {
                color: colors.textColor
              },
              grid: {
                color: colors.gridColor
              }
            },
            y: {
              ticks: {
                color: colors.textColor
              },
              grid: {
                color: colors.gridColor
              }
            }
          } : undefined,
          ...options
        };
          try {
          const chart = new Chart(ctx, {
            type: type,
            data: data,
            options: defaultOptions
          });
          
          // Store chart instance for theme updates
          window[`chartInstance_${id}`] = chart;
          
          // Function to update colors
          function updateChartColors() {
            const newColors = getThemeColors();
            
            if (chart.options.plugins?.title) {
              chart.options.plugins.title.color = newColors.textColor;
            }
            if (chart.options.plugins?.legend?.labels) {
              chart.options.plugins.legend.labels.color = newColors.textColor;
            }
            if (chart.options.scales) {
              if (chart.options.scales.x) {
                chart.options.scales.x.ticks.color = newColors.textColor;
                chart.options.scales.x.grid.color = newColors.gridColor;
              }
              if (chart.options.scales.y) {
                chart.options.scales.y.ticks.color = newColors.textColor;
                chart.options.scales.y.grid.color = newColors.gridColor;
              }
            }
            chart.update('none');
          }
          
          // Listen for theme changes
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                updateChartColors();
              }
            });
          });
          
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['data-theme']
          });
          
          console.log('Chart created successfully:', chart);
        } catch (error) {
          console.error('Error creating chart:', error);
          console.log('Data:', data);
          console.log('Type:', type);
        }
      } else {
        console.error('Canvas not found:', id);
      }
    } else {
      console.log('Chart.js not loaded, retrying in 500ms...');
      setTimeout(createChart, 500);
    }
  }
  
  // Try to create chart immediately or when DOM is ready
  if (document.readyState === 'complete') {
    createChart();
  } else {
    window.addEventListener('load', createChart);
  }
</script>

<style>
  .simple-chart-container {
    background: var(--chart-background, #ffffff);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 2px 10px var(--chart-shadow, rgba(0, 0, 0, 0.1));
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid var(--chart-border, rgba(0, 0, 0, 0.1));
    transition: background-color 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;
  }
  
  canvas {
    max-width: 100%;
    height: auto;
  }
  
  @media (max-width: 768px) {
    .simple-chart-container {
      width: 100% !important;
      max-width: 100%;
    }
  }
  
  /* Light theme chart variables */
  :global([data-theme="light"]) .simple-chart-container {
    --chart-background: #ffffff;
    --chart-shadow: rgba(0, 0, 0, 0.1);
    --chart-border: rgba(0, 0, 0, 0.1);
    --chart-text-color: #1a202c;
    --chart-grid-color: rgba(0, 0, 0, 0.1);
  }
  
  /* Dark theme chart variables */
  :global([data-theme="dark"]) .simple-chart-container {
    --chart-background: #2d3748;
    --chart-shadow: rgba(0, 0, 0, 0.3);
    --chart-border: rgba(255, 255, 255, 0.1);
    --chart-text-color: #e2e8f0;
    --chart-grid-color: rgba(255, 255, 255, 0.1);
  }
</style>
